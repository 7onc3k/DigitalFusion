---
import type { ISourceOptions } from "@tsparticles/engine";

export interface ParticlesProps {
  id: string;
  options?: ISourceOptions;
  url?: string;
}

const { id, options, url } = Astro.props as ParticlesProps;
---

<astro-particles
  data-id={id}
  data-options={options ? JSON.stringify(options) : undefined}
  data-url={url}
>
  <canvas></canvas>
</astro-particles>

<script>
  import { tsParticles } from "@tsparticles/engine";
  import { loadFull } from "tsparticles";

  class AstroParticles extends HTMLElement {
    private initialized = false;

    constructor() {
      super();
      this.init();
    }

    async init() {
      if (this.initialized) return;
      
      try {
        await loadFull(tsParticles);
        
        const id = this.dataset.id;
        const options = this.dataset.options;
        const url = this.dataset.url;

        if (id) {
          if (url) {
            await tsParticles.load({ id, url });
          } else if (options) {
            await tsParticles.load({ id, options: JSON.parse(options) });
          }
        }
        
        this.initialized = true;
      } catch (error) {
        console.error('Failed to initialize particles:', error);
      }
    }
  }

  customElements.define("astro-particles", AstroParticles);
</script>